Timer unit: 1e-06 s

Total time: 550.803 s
File: worker_asy.py
Function: __init__ at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                               @profile
    42                                               def __init__(self, wid):
    43         1          1.0      1.0      0.0          self.worker_id = int(wid)
    44                                                   
    45         1        746.0    746.0      0.0          graph = ConvertFile.toGraph(f"./data_small/neighbor_small.txt", " ")
    46                                                   # graph = ConvertFile.toGraph(f"./data/neighbor.txt", " ")
    47                                                   
    48         2         32.0     16.0      0.0          with open(NODE_FEATURES, 'r') as file:
    49         1         13.0     13.0      0.0              lines = file.readlines()
    50         1        443.0    443.0      0.0          executor = concurrent.futures.ThreadPoolExecutor(max_workers=1500)
    51        14          3.0      0.2      0.0          for line in lines:
    52        13         10.0      0.8      0.0              parts = line.strip().split()[:2]
    53        13         10.0      0.8      0.0              if int(parts[0]) % NUM_PARTITIONS == self.worker_id:
    54         3          2.0      0.7      0.0                  self.vertex_number += 1
    55         3         10.0      3.3      0.0                  out_edges = graph.successors(parts[0])
    56         3          3.0      1.0      0.0                  in_edges = graph.predecessors(parts[0])
    57                                                           # self.vertexDict[12345 + int(parts[0])] = Vertex(parts[0], int(parts[1]), in_edges, out_edges)
    58         3        569.0    189.7      0.0                  executor.submit(Vertex, parts[0], int(parts[1]), list(in_edges), list(out_edges))
    59                                                   
    60         1         40.0     40.0      0.0          sources = [n for n, d in graph.out_degree() if d == 0]
    61         8          2.0      0.2      0.0          for vertex in sources:
    62         7          6.0      0.9      0.0              if int(vertex) % NUM_PARTITIONS == self.worker_id:
    63         2          1.0      0.5      0.0                  self.vertex_number += 1
    64         2          2.0      1.0      0.0                  self.initial_vertex.append(vertex)
    65         2          2.0      1.0      0.0                  in_edges = graph.predecessors(vertex)
    66         2        373.0    186.5      0.0                  executor.submit(Vertex, vertex, 0, list(in_edges), [])
    67                                                   
    68         1         32.0     32.0      0.0          server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    69         1          1.0      1.0      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    70         1          4.0      4.0      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
    71         1          1.0      1.0      0.0          server_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    72         1       1384.0   1384.0      0.0          server_socket.bind((host, 10000 + self.worker_id))
    73         1        214.0    214.0      0.0          server_socket.listen(1500)
    74                                                   
    75                                                   # executor = concurrent.futures.ThreadPoolExecutor()
    76                                                   # self.handle_client(server_socket)
    77         1        164.0    164.0      0.0          print('worker', self.worker_id , 'ready!')
    78         2        537.0    268.5      0.0          with concurrent.futures.ThreadPoolExecutor() as e:
    79        32          6.0      0.2      0.0              while True:
    80        32  550357056.0    2e+07     99.9                  client_socket, _ = server_socket.accept()
    81        31     441311.0  14235.8      0.1                  e.submit(self.handle_client_connection, client_socket)

Total time: 15.2959 s
File: worker_asy.py
Function: handle_client_connection at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                               @profile
    91                                               def handle_client_connection(self, client_socket):
    92        31     286015.0   9226.3      1.9          data = client_socket.recv(102400)
    93        31         32.0      1.0      0.0          message = data.decode()
    94        31    3755457.0 121143.8     24.6          print('worker', self.worker_id, ':', 'get msg:', data)
    95        31         31.0      1.0      0.0          if "epoch_" in message:
    96         1          5.0      5.0      0.0              self.target_epoch = message.split("_")[1]
    97         4          6.0      1.5      0.0              for e in range(int(self.target_epoch) + 1):
    98         3       7840.0   2613.3      0.1                  self.send_snapshot_to_initial_vertex(e)
    99  16809648    4482969.0      0.3     29.3              while True:
   100  16809648    6486599.0      0.4     42.4                  if len(self.vertexDict.keys()) == self.vertex_number:
   101         1          1.0      1.0      0.0                      key = f"vertex_{self.worker_id}"
   102         1         62.0     62.0      0.0                      send_data = json.dumps({key: self.vertexDict})
   103         1         10.0     10.0      0.0                      client_socket.send(send_data.encode())
   104         1          0.0      0.0      0.0                      break
   105                                           
   106        30         17.0      0.6      0.0          elif "record_" in message:
   107        30         47.0      1.6      0.0              parts = message.split("_")
   108        30          8.0      0.3      0.0              nid = parts[1]
   109        30          7.0      0.2      0.0              feature = parts[2]
   110        30          8.0      0.3      0.0              epoch = parts[3]
   111        30         18.0      0.6      0.0              if epoch == self.target_epoch:
   112        10         22.0      2.2      0.0                  self.vertexDict.update({nid: feature})
   113        31         19.0      0.6      0.0          if system == 'Darwin':
   114        31      91795.0   2961.1      0.6              client_socket.shutdown(socket.SHUT_WR)
   115        10     184893.0  18489.3      1.2          client_socket.close()

Total time: 0.007759 s
File: worker_asy.py
Function: send_snapshot_to_initial_vertex at line 117

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   117                                               @profile
   118                                               def send_snapshot_to_initial_vertex(self, epoch):
   119         3          1.0      0.3      0.0          initial_vertex_notify_list = []
   120                                                   # print(self.initial_vertex)
   121         6       5566.0    927.7     71.7          with concurrent.futures.ThreadPoolExecutor() as executor:
   122         9          3.0      0.3      0.0              for vertex in self.initial_vertex:
   123         6       2115.0    352.5     27.3                  future = executor.submit(notify, vertex, f"snapshot_{epoch}")
   124         6          7.0      1.2      0.1                  initial_vertex_notify_list.append(future)
   125         3         67.0     22.3      0.9          concurrent.futures.wait(initial_vertex_notify_list)

Total time: 1180.14 s
File: worker_asy.py
Function: __init__ at line 128

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   128                                               @profile
   129                                               def __init__(self, node, feature, in_edges, out_edges):
   130         5          4.0      0.8      0.0          self.id = node
   131         5          4.0      0.8      0.0          self.port = 12345 + int(node)
   132         5          0.0      0.0      0.0          self.sp = [feature] 
   133                                                   # self.sp_snapshot = None # sp*
   134                                           
   135                                                   # in_edges is Op in chandy lamport algorithm.
   136         5          2.0      0.4      0.0          self.in_edges_list = in_edges
   137                                                   # out_edges is Ip in chandy lamport algorithm.
   138         5          3.0      0.6      0.0          self.out_edges_list = out_edges
   139                                                   # self.Enabled = copy.deepcopy(self.out_edges_list) # [all out_edges]
   140         5          5.0      1.0      0.0          self.Enabled = self.out_edges_list.copy() # [all out_edges]
   141                                           
   142                                                   # self.epoch_dict = {}
   143                                                   # n_f.append(inbox.pop) until '__MARKER__0'
   144         5         16.0      3.2      0.0          self.neighbor_features = [[] for i in range(K)] # [['v0f23', ...], ['v0v10f13', ...], ['v0v10v20f33', ...], ...] len(n_f)==k (features we use to khop epoch 1)
   145         5          6.0      1.2      0.0          self.inbox = {out:[] for out in self.out_edges_list} # ['__MARKER__e0v0', ..., 'v0v10v20fxxx', 'v0v10fxxxx', 'v0fxxxxx', '__MARKER__e0v8', ..., '__MARKER__e1v0', ..., ...]
   146                                                   # self.Mp = [] # [m, m, m, ...] this is part of inbox
   147         5         74.0     14.8      0.0          self.message_queue = queue.Queue()
   148                                                   
   149                                                   # print(self.id)
   150         5        741.0    148.2      0.0          server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   151         5         20.0      4.0      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
   152         5         32.0      6.4      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
   153         5          7.0      1.4      0.0          server_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
   154         5       8931.0   1786.2      0.0          server_socket.bind((host, self.port))
   155         5        420.0     84.0      0.0          server_socket.listen(5000)
   156                                           
   157                                                   # print("start: ", self.id)
   158                                           
   159         5         64.0     12.8      0.0          exec = concurrent.futures.ThreadPoolExecutor()
   160                                                   # fList = []
   161        13         12.0      0.9      0.0          for c in self.out_edges_list:
   162         8       2672.0    334.0      0.0              exec.submit(self.handle_msg, c, self.inbox[c])
   163                                                       # fList.append(future)
   164                                                   # print(self.id)
   165         5        897.0    179.4      0.0          exec.submit(self.toInbox)
   166        83         73.0      0.9      0.0          while True:
   167        78 1177981919.0    2e+07     99.8              client_socket, _ = server_socket.accept()
   168        78         28.0      0.4      0.0              try:
   169        78    1552511.0  19904.0      0.1                  data = client_socket.recv(102400)
   170                                                           # print(time.time())
   171        78       1363.0     17.5      0.0                  self.message_queue.put(data)
   172                                                           # print('vertex', self.id, ':', 'get msg:', data)
   173                                                           # self.toInbox(data.decode())
   174                                                           # client_socket.send(rep.encode())
   175                                                           # print('vertex', self.id, ':', 'reply msg:', rep)
   176                                                       finally:
   177                                                           # if system == 'Darwin':
   178                                                           #     client_socket.shutdown(socket.SHUT_WR)
   179        78     589359.0   7555.9      0.0                  client_socket.close()
   180                                                   # concurrent.futures.wait(fList)

Total time: 1185.42 s
File: worker_asy.py
Function: toInbox at line 182

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   182                                               @profile
   183                                               def toInbox(self):
   184                                                   # print(message)
   185        83         27.0      0.3      0.0          while True:
   186                                                       # print(self.id, self.inbox)
   187        78 1175166848.0    2e+07     99.1              message = self.message_queue.get().decode()
   188        78    5950082.0  76283.1      0.5              print('vertex', self.id, ':', 'get msg:', message)
   189        78         69.0      0.9      0.0              if "snapshot_" in message:
   190         6         11.0      1.8      0.0                  parts = message.split("_")
   191         6          1.0      0.2      0.0                  epoch = parts[1]
   192                                                           
   193         6     495118.0  82519.7      0.0                  self.record(epoch, self.get(self.epoch()))
   194                                           
   195                                                           # pass feature and then marker
   196                                                           # for e in range(epoch):
   197         6          9.0      1.5      0.0                  initial_vertex_feature_list = []
   198        12     776338.0  64694.8      0.1                  with concurrent.futures.ThreadPoolExecutor() as executor:
   199        12          8.0      0.7      0.0                      for out in self.in_edges_list:
   200         6     214659.0  35776.5      0.0                          future = executor.submit(notify, out, f"v{self.id}f{self.get(self.epoch())}")
   201         6          6.0      1.0      0.0                          initial_vertex_feature_list.append(future)
   202         6         92.0     15.3      0.0                  concurrent.futures.wait(initial_vertex_feature_list)
   203                                           
   204         6     822866.0 137144.3      0.1                  print(self.id, "send all features")
   205                                           
   206         6         18.0      3.0      0.0                  initial_vertex_marker_list = []
   207        12    1240835.0 103402.9      0.1                  with concurrent.futures.ThreadPoolExecutor() as executor:
   208        12          7.0      0.6      0.0                      for out in self.in_edges_list:
   209         6     170008.0  28334.7      0.0                          future = executor.submit(notify, out, f"marker_{epoch}_{self.id}")
   210         6          1.0      0.2      0.0                          initial_vertex_marker_list.append(future)
   211         6        103.0     17.2      0.0                  concurrent.futures.wait(initial_vertex_marker_list)
   212                                           
   213         6     580511.0  96751.8      0.0                  print(self.id, "send all markers")
   214         6          2.0      0.3      0.0                  continue
   215                                           
   216                                                           # return 'ok'
   217        72         27.0      0.4      0.0              elif "marker_" in message:
   218        24         55.0      2.3      0.0                  _, _, c = message.split("_")
   219                                                       else:
   220        48         93.0      1.9      0.0                  c = message.split('f')[0].split('v')[1]
   221        72        120.0      1.7      0.0              self.inbox[c].append(message)
   222                                                       
   223                                                       # print(self.id, self.message_queue.empty)
   224                                                       # return 'ok'

Total time: 0.000697 s
File: worker_asy.py
Function: khop_neighborhood at line 235

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   235                                               @profile
   236                                               def khop_neighborhood(self):
   237         9          4.0      0.4      0.6          try:
   238         9         32.0      3.6      4.6              sums = self.get(self.epoch())
   239                                                       
   240         9         11.0      1.2      1.6              node_neighbors_set = set(self.out_edges_list)
   241                                                       # node_neighbors_set = set(['v' + i for i in out_edges_list])
   242                                                       
   243        27         19.0      0.7      2.7              for j in range(K): 
   244        18        305.0     16.9     43.8                  random_neighbors = random.sample(list(node_neighbors_set), DELTAS[j] if len(node_neighbors_set) > DELTAS[j] else len(node_neighbors_set))
   245        18         11.0      0.6      1.6                  node_neighbors_set = set()
   246        18          6.0      0.3      0.9                  temp_set = set()
   247                                           
   248                                                           # print(random_neighbors)
   249                                                           # for feature in self.neighbor_features[j]:
   250                                                           #         if feature[0:feature.rfind('f')] in random_neighbors:
   251                                                           #                 sums += int(feature[feature.rfind('f') + 1:])
   252                                                           
   253                                                           # if j < k - 1:
   254                                                           #         for feature in self.neighbor_features[j+1]:
   255                                                           #                 if feature[0:feature.rfind('v')] in random_neighbors:
   256                                                           #                         node_neighbors_set.add(feature[0:feature.rfind('f')])
   257        63         12.0      0.2      1.7                  for vertex in random_neighbors:
   258       198         42.0      0.2      6.0                      for feature in self.neighbor_features[j]:
   259       153         79.0      0.5     11.3                          if feature.startswith("v" + vertex):
   260        45         23.0      0.5      3.3                              start_index = feature.find("f")
   261        45         24.0      0.5      3.4                              sub_text = feature[start_index + 1:] 
   262        45         28.0      0.6      4.0                              sums += int(sub_text)
   263        45         12.0      0.3      1.7                      if j < K - 1:
   264        81         22.0      0.3      3.2                          for v in self.neighbor_features[j + 1]:
   265        57         17.0      0.3      2.4                              if v.startswith("v" + vertex):
   266                                                                           # start_index = len("v" + vertex)
   267        24         12.0      0.5      1.7                                  end_index = v.find("f")
   268        24          4.0      0.2      0.6                                  sub_text = v[1:end_index]
   269        24         14.0      0.6      2.0                                  temp = v[v.rfind("v") + 1 : end_index]
   270        24          5.0      0.2      0.7                                  if temp not in temp_set:
   271        21          7.0      0.3      1.0                                      node_neighbors_set.add(sub_text) # [2v8 7v8]
   272        21          6.0      0.3      0.9                                      temp_set.add(temp)
   273                                                           
   274                                                           # featrueList = [self.epoch_dict.get(vertex, None) for vertex in random_neighbors]
   275                                                           
   276                                                           # while None in featrueList:
   277                                                           #     sleep(3)
   278                                                           #     featrueList = [self.epoch_dict.get(vertex, None) for vertex in random_neighbors]
   279                                                           
   280                                                           # for featrue in featrueList:
   281                                                           #     sums += featrue
   282                                                           
   283                                                           # for ask_future in neighborhood_ask_list:
   284                                                           #     msg = ask_future.result()
   285                                                           #     data = json.loads(msg)
   286                                                           #     if j < k - 1:
   287                                                           #         node_neighbors_set.update(data['out_edges'])
   288                                                   except Exception as e:
   289                                                       with open('khop_neighborhood', 'a') as f:
   290                                                           f.write(str(e) + '\n' + str(traceback.format_exc()) + '\n\n\n\n\n')
   291         9          2.0      0.2      0.3          return sums
   292                                               
   293                                               # def startRecording(self):
   294                                                   # self.sp_snapshot = self.get(self.epoch())
   295                                                   # for out in self.out_edges_list:
   296                                                   #     send marker
   297                                                   # pass

Total time: 4392.78 s
File: worker_asy.py
Function: handle_msg at line 299

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   299                                               @profile
   300                                               def handle_msg(self, c, messageList):
   301   1976697     354787.0      0.2      0.0          while True:
   302   1976697     242715.0      0.1      0.0              try:
   303                                                           # print(self.id, messageList)
   304   1976697     320102.0      0.2      0.0                  message = messageList[0]
   305      1462       3760.0      2.6      0.0              except IndexError:
   306      1454 4367634877.0    3e+06     99.4                  sleep(3)
   307      1454       8181.0      5.6      0.0                  continue
   308                                                       
   309   1975235     271576.0      0.1      0.0              if "marker_" in message:
   310        24         20.0      0.8      0.0                  parts = message.split("_")
   311        24          5.0      0.2      0.0                  epoch = parts[1]
   312                                           
   313        24         15.0      0.6      0.0                  if c in self.Enabled:
   314        24    4037489.0 168228.7      0.1                      self.record(epoch, self.get(self.epoch()))
   315        24         79.0      3.3      0.0                      self.Enabled.remove(c)
   316                                           
   317        24         18.0      0.8      0.0                      if len(self.Enabled) == 0:
   318                                                                   # send self feature
   319         9          9.0      1.0      0.0                          vertex_feature_list = []
   320        18    1853633.0 102979.6      0.0                          with concurrent.futures.ThreadPoolExecutor() as executor:
   321        24         14.0      0.6      0.0                              for out in self.in_edges_list:
   322        15     432819.0  28854.6      0.0                                  future = executor.submit(notify, out, f"v{self.id}f{self.get(self.epoch())}")
   323        15         10.0      0.7      0.0                                  vertex_feature_list.append(future)
   324         9        183.0     20.3      0.0                          concurrent.futures.wait(vertex_feature_list)
   325                                           
   326         9     409259.0  45473.2      0.0                          print(self.id, "send all features")
   327                                           
   328         9       1061.0    117.9      0.0                          self.sp.append(self.khop_neighborhood())
   329         9         23.0      2.6      0.0                          self.neighbor_features = [[] for i in range(K)]
   330                                           
   331         9         15.0      1.7      0.0                          vertex_marker_list = []
   332        18    1225166.0  68064.8      0.0                          with concurrent.futures.ThreadPoolExecutor() as executor:
   333        24          9.0      0.4      0.0                              for out in self.in_edges_list:
   334        15     555047.0  37003.1      0.0                                  future = executor.submit(notify, out, f"marker_{epoch}_{self.id}")
   335        15         12.0      0.8      0.0                                  vertex_marker_list.append(future)
   336         9        142.0     15.8      0.0                          concurrent.futures.wait(vertex_marker_list)
   337                                           
   338         9     379396.0  42155.1      0.0                          print(self.id, "send all markers")
   339                                           
   340                                                                   # self.Enabled = copy.deepcopy(self.out_edges_list)
   341         9         14.0      1.6      0.0                          self.Enabled = self.out_edges_list.copy()
   342                                                                   # print(self.Enabled)
   343                                                           # messages are before marker, marker can't be in Disabled
   344                                                           else:
   345                                                               continue
   346                                           
   347                                                       else:
   348   1975211     330957.0      0.2      0.0                  if c in self.Enabled:
   349        48         54.0      1.1      0.0                      index = message.count('v')
   350        48         13.0      0.3      0.0                      if index <= K:
   351        48         36.0      0.8      0.0                          self.neighbor_features[index - 1].append(message)
   352        48         13.0      0.3      0.0                      if index < K:
   353        24         27.0      1.1      0.0                          send_feature = f"v{self.id}" + message
   354        24         30.0      1.2      0.0                          neighbor_feature_list = []
   355        48    2193455.0  45697.0      0.0                          with concurrent.futures.ThreadPoolExecutor() as executor:
   356        63         27.0      0.4      0.0                              for out in self.in_edges_list:
   357        39    1410021.0  36154.4      0.0                                  future = executor.submit(notify, out, send_feature)
   358        39         24.0      0.6      0.0                                  neighbor_feature_list.append(future)
   359        24        358.0     14.9      0.0                          concurrent.futures.wait(neighbor_feature_list)
   360                                           
   361                                                           else:
   362   1975163   11116234.0      5.6      0.3                      continue
   363                                                       
   364        72         67.0      0.9      0.0              messageList.pop(0)
   365                                           
   366                                                       # return 'ok'
   367                                           
   368                                                           # if cqp not in self.Recorded:
   369                                                           #     pass
   370                                                           
   371                                                           # elif cqp in self.Recorded:
   372                                                           #     pass

Total time: 4.53234 s
File: worker_asy.py
Function: record at line 373

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   373                                               @profile
   374                                               def record(self, epoch, sp_snaposhot):
   375        30         47.0      1.6      0.0          message = f"record_{self.id}_{sp_snaposhot}_{epoch}"
   376        30    4532297.0 151076.6    100.0          notify(str(int(self.id) % NUM_PARTITIONS), message, True)

Total time: 14.427 s
File: worker_asy.py
Function: notify at line 378

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   378                                           @profile
   379                                           def notify(node, msg, worker=False):
   380       117    5766075.0  49282.7     40.0      print('notify:', msg)
   381       117         37.0      0.3      0.0      while True:
   382       117    1523944.0  13025.2     10.6          client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   383       117        649.0      5.5      0.0          client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
   384       117        857.0      7.3      0.0          client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
   385       117        182.0      1.6      0.0          client_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
   386       117         20.0      0.2      0.0          try:
   387       117         26.0      0.2      0.0              if worker:
   388        30     782905.0  26096.8      5.4                  client_socket.connect((serverDict[int(node) % NUM_PARTITIONS], 10000 + int(node)))
   389                                                       else:
   390        87    2761940.0  31746.4     19.1                  client_socket.connect((serverDict[int(node) % NUM_PARTITIONS], 12345 + int(node)))
   391                                                       
   392                                                       # print("connect: ", node)
   393                                                       # print(time.time())
   394       117    1326008.0  11333.4      9.2              client_socket.send(msg.encode())
   395                                                       
   396                                                       # data = client_socket.recv(102400).decode()
   397                                                       
   398                                                       # print('get reply:', data)
   399                                           
   400       117    1091581.0   9329.8      7.6              client_socket.shutdown(socket.SHUT_WR)
   401       117    1172442.0  10020.9      8.1              client_socket.close()
   402       117         43.0      0.4      0.0              break
   403                                                   except ConnectionRefusedError:
   404                                                       # print('notify connection error')
   405                                                       client_socket.close()
   406                                                       # sleep(1)
   407                                                       continue
   408                                                   except OSError:
   409                                                       print('notify os error')
   410                                                       client_socket.close()
   411                                                       # sleep(1)
   412                                                       continue
   413                                                   # except Exception as e:
   414                                                   #     with open('ask', 'a') as f:
   415                                                   #         f.write(str(msg) + '\n' + str(e) + '\n' + str(traceback.format_exc()) + '\n\n\n\n\n')
   416                                                   finally:
   417       117        287.0      2.5      0.0              client_socket.close()

