Timer unit: 1e-06 s

Total time: 90.3701 s
File: worker_asy.py
Function: __init__ at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                               @profile
    39                                               def __init__(self, wid):
    40         1          1.0      1.0      0.0          self.worker_id = int(wid)
    41                                                   
    42         1        767.0    767.0      0.0          graph = ConvertFile.toGraph(f"./data_small/neighbor_small.txt", " ")
    43                                                   # graph = ConvertFile.toGraph(f"./data/neighbor.txt", " ")
    44                                                   
    45         2         39.0     19.5      0.0          with open(NODE_FEATURES, 'r') as file:
    46         1         16.0     16.0      0.0              lines = file.readlines()
    47         1        440.0    440.0      0.0          executor = concurrent.futures.ThreadPoolExecutor(max_workers=1500)
    48        14          4.0      0.3      0.0          for line in lines:
    49        13         11.0      0.8      0.0              parts = line.strip().split()[:2]
    50        13         11.0      0.8      0.0              if int(parts[0]) % NUM_PARTITIONS == self.worker_id:
    51         3          1.0      0.3      0.0                  self.vertex_number += 1
    52         3          9.0      3.0      0.0                  out_edges = graph.successors(parts[0])
    53         3          4.0      1.3      0.0                  in_edges = graph.predecessors(parts[0])
    54         3        601.0    200.3      0.0                  executor.submit(Vertex, parts[0], int(parts[1]), list(in_edges), list(out_edges))
    55                                                   
    56         1         36.0     36.0      0.0          sources = [n for n, d in graph.out_degree() if d == 0]
    57         8          1.0      0.1      0.0          for vertex in sources:
    58         7          3.0      0.4      0.0              if int(vertex) % NUM_PARTITIONS == self.worker_id:
    59         2          1.0      0.5      0.0                  self.vertex_number += 1
    60         2          1.0      0.5      0.0                  self.initial_vertex.append(vertex)
    61         2          2.0      1.0      0.0                  in_edges = graph.predecessors(vertex)
    62         2        292.0    146.0      0.0                  executor.submit(Vertex, vertex, 0, list(in_edges), [])
    63                                                   
    64         1         29.0     29.0      0.0          server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    65         1          2.0      2.0      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    66         1          3.0      3.0      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
    67         1          1.0      1.0      0.0          server_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    68         1       1663.0   1663.0      0.0          server_socket.bind((host, 10000 + self.worker_id))
    69         1         81.0     81.0      0.0          server_socket.listen(1500)
    70                                                   
    71         1         54.0     54.0      0.0          print('worker', self.worker_id , 'ready!')
    72         2        580.0    290.0      0.0          with concurrent.futures.ThreadPoolExecutor() as e:
    73        18          7.0      0.4      0.0              while True:
    74        18   90240580.0    5e+06     99.9                  client_socket, _ = server_socket.accept()
    75        17     124815.0   7342.1      0.1                  e.submit(self.handle_client_connection, client_socket)

Total time: 9.59699 s
File: worker_asy.py
Function: handle_client_connection at line 84

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    84                                               @profile
    85                                               def handle_client_connection(self, client_socket):
    86        17     205891.0  12111.2      2.1          data = client_socket.recv(102400)
    87        17         21.0      1.2      0.0          message = data.decode()
    88        17     186636.0  10978.6      1.9          print('worker', self.worker_id, ':', 'get msg:', data)
    89        17         14.0      0.8      0.0          if "epoch_" in message:
    90         1          5.0      5.0      0.0              self.target_epoch = message.split("_")[1]
    91         3          4.0      1.3      0.0              for e in range(1, int(self.target_epoch) + 1):
    92         2       2852.0   1426.0      0.0                  self.send_snapshot_to_initial_vertex(e)
    93  10320483    3594877.0      0.3     37.5              while True:
    94  10320483    5568747.0      0.5     58.0                  if len(self.vertexDict.keys()) == self.vertex_number:
    95         1          1.0      1.0      0.0                      key = f"vertex_{self.worker_id}"
    96         1         49.0     49.0      0.0                      send_data = json.dumps({key: self.vertexDict})
    97         1         12.0     12.0      0.0                      client_socket.send(send_data.encode())
    98         1          0.0      0.0      0.0                      break
    99                                           
   100        16          7.0      0.4      0.0          elif "record_" in message:
   101        16         21.0      1.3      0.0              parts = message.split("_")
   102        16         10.0      0.6      0.0              nid = parts[1]
   103        16          3.0      0.2      0.0              feature = parts[2]
   104        16          5.0      0.3      0.0              epoch = parts[3]
   105        16          8.0      0.5      0.0              if epoch == self.target_epoch:
   106         8         12.0      1.5      0.0                  self.vertexDict.update({nid: feature})
   107        17         15.0      0.9      0.0          if system == 'Darwin':
   108        17      18882.0   1110.7      0.2              client_socket.shutdown(socket.SHUT_WR)
   109         4      18915.0   4728.8      0.2          client_socket.close()

Total time: 0.002813 s
File: worker_asy.py
Function: send_snapshot_to_initial_vertex at line 111

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   111                                               @profile
   112                                               def send_snapshot_to_initial_vertex(self, epoch):
   113         2          0.0      0.0      0.0          initial_vertex_notify_list = []
   114                                                   # print(self.initial_vertex)
   115         4       1867.0    466.8     66.4          with concurrent.futures.ThreadPoolExecutor() as executor:
   116         6          3.0      0.5      0.1              for vertex in self.initial_vertex:
   117         4        905.0    226.2     32.2                  future = executor.submit(notify, vertex, f"snapshot_{epoch}")
   118         4          4.0      1.0      0.1                  initial_vertex_notify_list.append(future)
   119         2         34.0     17.0      1.2          concurrent.futures.wait(initial_vertex_notify_list)

Total time: 83.1509 s
File: worker_asy.py
Function: __init__ at line 122

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   122                                               @profile
   123                                               def __init__(self, node, feature, in_edges, out_edges):
   124         5          2.0      0.4      0.0          self.id = node
   125         5          6.0      1.2      0.0          self.port = 12345 + int(node)
   126         5          3.0      0.6      0.0          self.sp = [feature] 
   127         5          1.0      0.2      0.0          self.sp_snapshot = None # sp*
   128                                           
   129                                                   # in_edges is Op in chandy lamport algorithm.
   130         5          1.0      0.2      0.0          self.in_edges_list = in_edges
   131                                                   # out_edges is Ip in chandy lamport algorithm.
   132         5          1.0      0.2      0.0          self.out_edges_list = out_edges
   133         5          4.0      0.8      0.0          self.Enabled = self.out_edges_list.copy() # [all out_edges]
   134                                           
   135         5         10.0      2.0      0.0          self.neighbor_features = [[] for i in range(K)] # [['v0f23', ...], ['v0v10f13', ...], ['v0v10v20f33', ...], ...] len(n_f)==k (features we use to khop epoch 1)
   136         5          8.0      1.6      0.0          self.inbox = {out:[] for out in self.out_edges_list} # ['__MARKER__e0v0', ..., 'v0v10v20fxxx', 'v0v10fxxxx', 'v0fxxxxx', '__MARKER__e0v8', ..., '__MARKER__e1v0', ..., ...]
   137                                                   # self.Mp = [] # [m, m, m, ...] this is part of inbox
   138         5         82.0     16.4      0.0          self.message_queue = queue.Queue()
   139                                           
   140         5         16.0      3.2      0.0          self.khop = threading.Condition()
   141         5         11.0      2.2      0.0          self.lock = threading.Condition()
   142         5          2.0      0.4      0.0          self.khop_started = False
   143                                                   # self.record_state = threading.Condition()
   144                                                   
   145         5        734.0    146.8      0.0          server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   146         5         21.0      4.2      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
   147         5         25.0      5.0      0.0          server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
   148         5          5.0      1.0      0.0          server_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
   149         5       8765.0   1753.0      0.0          server_socket.bind((host, self.port))
   150         5        213.0     42.6      0.0          server_socket.listen(5000)
   151                                           
   152                                                   # print("start: ", self.id)
   153                                           
   154         5         87.0     17.4      0.0          exec = concurrent.futures.ThreadPoolExecutor()
   155                                                   # listen channels
   156        11          9.0      0.8      0.0          for c in self.out_edges_list:
   157         6       2358.0    393.0      0.0              exec.submit(self.handle_msg, c, self.inbox[c])
   158                                                   # classify message to specific channel
   159         5       1831.0    366.2      0.0          exec.submit(self.toInbox)
   160                                           
   161        55         39.0      0.7      0.0          while True:
   162        50   82225005.0    2e+06     98.9              client_socket, _ = server_socket.accept()
   163        50          9.0      0.2      0.0              try:
   164        50     481531.0   9630.6      0.6                  data = client_socket.recv(102400)
   165        50        684.0     13.7      0.0                  self.message_queue.put(data)
   166                                                           # print('vertex', self.id, ':', 'get msg:', data)
   167                                                       finally:
   168                                                           # if system == 'Darwin':
   169                                                           #     client_socket.shutdown(socket.SHUT_WR)
   170        50     429443.0   8588.9      0.5                  client_socket.close()

Total time: 83.6864 s
File: worker_asy.py
Function: toInbox at line 172

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   172                                               @profile
   173                                               def toInbox(self):
   174                                                   # print(message)
   175        55         12.0      0.2      0.0          while True:
   176                                                       # print(self.id, self.inbox)
   177        50   82989313.0    2e+06     99.2              message = self.message_queue.get().decode()
   178        50     175907.0   3518.1      0.2              print('vertex', self.id, ':', 'get msg:', message)
   179        50         34.0      0.7      0.0              if "snapshot_" in message:
   180         4          4.0      1.0      0.0                  parts = message.split("_")
   181         4          2.0      0.5      0.0                  epoch = parts[1]
   182                                                           
   183         4      64848.0  16212.0      0.1                  self.record(epoch, self.get(self.epoch()))
   184                                           
   185                                                           # pass feature and then marker
   186         4          6.0      1.5      0.0                  initial_vertex_feature_list = []
   187         8     134498.0  16812.2      0.2                  with concurrent.futures.ThreadPoolExecutor() as executor:
   188        12          5.0      0.4      0.0                      for out in self.in_edges_list:
   189         8     108960.0  13620.0      0.1                          future = executor.submit(notify, out, f"v{self.id}f{self.get(self.epoch())}")
   190         8         12.0      1.5      0.0                          initial_vertex_feature_list.append(future)
   191         4         58.0     14.5      0.0                  concurrent.futures.wait(initial_vertex_feature_list)
   192                                           
   193         4         96.0     24.0      0.0                  print(self.id, "send all features")
   194                                           
   195         4          5.0      1.2      0.0                  initial_vertex_marker_list = []
   196         8     156767.0  19595.9      0.2                  with concurrent.futures.ThreadPoolExecutor() as executor:
   197        12          7.0      0.6      0.0                      for out in self.in_edges_list:
   198         8      37993.0   4749.1      0.0                          future = executor.submit(notify, out, f"marker_{epoch}_{self.id}")
   199         8          9.0      1.1      0.0                          initial_vertex_marker_list.append(future)
   200         4         74.0     18.5      0.0                  concurrent.futures.wait(initial_vertex_marker_list)
   201                                           
   202         4      17595.0   4398.8      0.0                  print(self.id, "send all markers")
   203         4          1.0      0.2      0.0                  continue
   204                                           
   205        46         16.0      0.3      0.0              elif "marker_" in message:
   206        12         22.0      1.8      0.0                  _, _, c = message.split("_")
   207                                                       else:
   208        34         80.0      2.4      0.0                  c = message.split('f')[0].split('v')[1]
   209        46         58.0      1.3      0.0              self.inbox[c].append(message)

Total time: 9.10914 s
File: worker_asy.py
Function: khop_neighborhood at line 220

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   220                                               @profile
   221                                               def khop_neighborhood(self):
   222         6          3.0      0.5      0.0          try:
   223         6         12.0      2.0      0.0              sums = self.get(self.epoch())
   224                                                       # print(self.id, sums)
   225         6          5.0      0.8      0.0              node_neighbors_set = set(self.out_edges_list)
   226                                           
   227         6        117.0     19.5      0.0              random_neighbors = random.sample(list(node_neighbors_set), DELTAS[0] if len(node_neighbors_set) > DELTAS[0] else len(node_neighbors_set))
   228         6          5.0      0.8      0.0              node_neighbors_set = random_neighbors.copy()
   229         9          0.0      0.0      0.0              while True:
   230         9        109.0     12.1      0.0                  if all(any(feature.startswith("v" + vertex) for feature in self.neighbor_features[0]) for vertex in random_neighbors): 
   231         6          3.0      0.5      0.0                      break
   232                                                           else:
   233                                                               # print(self.id, vertex, self.neighbor_features[0])
   234                                                               # with self.record_state:
   235                                                               #     self.record_state.notify()
   236         6         19.0      3.2      0.0                      with self.khop:
   237         3    9108529.0    3e+06    100.0                          self.khop.wait()    
   238                                                       
   239        18          5.0      0.3      0.0              for j in range(K): 
   240        12        104.0      8.7      0.0                  random_neighbors = random.sample(list(node_neighbors_set), DELTAS[j] if len(node_neighbors_set) > DELTAS[j] else len(node_neighbors_set))
   241        12          5.0      0.4      0.0                  node_neighbors_set = set()
   242        12          3.0      0.2      0.0                  temp_set = set()
   243                                           
   244                                                           # print(random_neighbors)
   245                                                           # for feature in self.neighbor_features[j]:
   246                                                           #         if feature[0:feature.rfind('f')] in random_neighbors:
   247                                                           #                 sums += int(feature[feature.rfind('f') + 1:])
   248                                                           
   249                                                           # if j < k - 1:
   250                                                           #         for feature in self.neighbor_features[j+1]:
   251                                                           #                 if feature[0:feature.rfind('v')] in random_neighbors:
   252                                                           #                         node_neighbors_set.add(feature[0:feature.rfind('f')])
   253        44          9.0      0.2      0.0                  for vertex in random_neighbors:
   254       176         35.0      0.2      0.0                      for feature in self.neighbor_features[j]:
   255       144         44.0      0.3      0.0                          if feature.startswith("v" + vertex):
   256        32         11.0      0.3      0.0                              start_index = feature.find("f")
   257        32          9.0      0.3      0.0                              sub_text = feature[start_index + 1:] 
   258        32         13.0      0.4      0.0                              sums += int(sub_text)
   259                                                                       # print(self.id, vertex, sums)
   260        32          7.0      0.2      0.0                      if j < K - 1:
   261        70         24.0      0.3      0.0                          for v in self.neighbor_features[j + 1]:
   262        58         19.0      0.3      0.0                              if v.startswith("v" + vertex):
   263        22          6.0      0.3      0.0                                  end_index = v.find("f")
   264        22          5.0      0.2      0.0                                  sub_text = v[1:end_index]
   265        22          9.0      0.4      0.0                                  temp = v[v.rfind("v") + 1 : end_index]
   266        22          6.0      0.3      0.0                                  if temp not in temp_set:
   267        20          6.0      0.3      0.0                                      node_neighbors_set.add(sub_text) # [2v8 7v8]
   268        20          6.0      0.3      0.0                                      temp_set.add(temp)
   269                                                           
   270                                                           # featrueList = [self.epoch_dict.get(vertex, None) for vertex in random_neighbors]
   271                                                           
   272                                                           # while None in featrueList:
   273                                                           #     sleep(3)
   274                                                           #     featrueList = [self.epoch_dict.get(vertex, None) for vertex in random_neighbors]
   275                                                           
   276                                                           # for featrue in featrueList:
   277                                                           #     sums += featrue
   278                                                           
   279                                                           # for ask_future in neighborhood_ask_list:
   280                                                           #     msg = ask_future.result()
   281                                                           #     data = json.loads(msg)
   282                                                           #     if j < k - 1:
   283                                                           #         node_neighbors_set.update(data['out_edges'])
   284                                                       
   285                                                   except Exception as e:
   286                                                       with open('khop_neighborhood', 'a') as f:
   287                                                           f.write(str(e) + '\n' + str(traceback.format_exc()) + '\n\n\n\n\n')
   288                                           
   289         6         11.0      1.8      0.0          self.neighbor_features = [[] for i in range(K)]
   290         6          4.0      0.7      0.0          self.sp.append(sums)
   291                                                   # with self.record_state:
   292                                                   #     self.record_state.notify()
   293                                                   # print("khop result: ", self.id, sums)
   294                                                   # return sums
   295                                               
   296                                               # def startRecording(self):
   297                                                   # self.sp_snapshot = self.get(self.epoch())
   298                                                   # for out in self.out_edges_list:
   299                                                   #     send marker
   300                                                   # pass

Total time: 529.018 s
File: worker_asy.py
Function: handle_msg at line 302

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   302                                               @profile
   303                                               def handle_msg(self, c, messageList):
   304   2475792     427204.0      0.2      0.1          while True:
   305   2475792     310011.0      0.1      0.1              try:
   306                                                           # print(self.id, messageList)
   307   2475792     406423.0      0.2      0.1                  message = messageList[0]
   308       176        499.0      2.8      0.0              except IndexError:
   309       170  510759956.0    3e+06     96.5                  sleep(3)
   310       170        942.0      5.5      0.0                  continue
   311                                                       
   312   2475616     359147.0      0.1      0.1              if "marker_" in message:
   313        12         13.0      1.1      0.0                  parts = message.split("_")
   314        12          1.0      0.1      0.0                  epoch = parts[1]
   315                                           
   316        12          7.0      0.6      0.0                  if c in self.Enabled:
   317        24     246626.0  10276.1      0.0                      with self.lock:
   318                                                                   # first time receive marker from one edge
   319        12          8.0      0.7      0.0                          if not self.khop_started:
   320         6         14.0      2.3      0.0                              self.sp_snapshot = self.get(self.epoch())
   321         6      90172.0  15028.7      0.0                              threading.Thread(target=self.khop_neighborhood).start()
   322         6          5.0      0.8      0.0                              self.khop_started = True
   323                                                                   # receive markers from other edges
   324                                                                   else:
   325        12         17.0      1.4      0.0                              with self.khop:
   326         6         24.0      4.0      0.0                                  self.khop.notify()
   327                                                                   #  wait for khop finish
   328        12         11.0      0.9      0.0                          if len(self.Enabled) == 1: 
   329         8         19.0      2.4      0.0                              while self.epoch() != int(epoch):
   330         2       6006.0   3003.0      0.0                                  print("here")
   331         2    2017583.0    1e+06      0.4                                  sleep(1)
   332         6          6.0      1.0      0.0                              self.khop_started = False
   333                                                                   # if len(self.Enabled) == 1 and t.is_alive():
   334                                                                   #     print("here1")
   335                                                                   #     t.join()
   336                                                                           
   337                                                                   # with self.record_state:
   338                                                                   #     self.record_state.wait()
   339        12     773859.0  64488.2      0.1                          self.record(self.epoch(), self.get(self.epoch()))
   340                                           
   341        12         15.0      1.2      0.0                          self.Enabled.remove(c)
   342                                           
   343        12          8.0      0.7      0.0                      if len(self.Enabled) == 0:
   344                                                                   # send self feature
   345         6          6.0      1.0      0.0                          vertex_feature_list = []
   346        12     438000.0  36500.0      0.1                          with concurrent.futures.ThreadPoolExecutor() as executor:
   347        14          9.0      0.6      0.0                              for out in self.in_edges_list:
   348         8      49786.0   6223.2      0.0                                  future = executor.submit(notify, out, f"v{self.id}f{self.sp_snapshot}")
   349         8          9.0      1.1      0.0                                  vertex_feature_list.append(future)
   350         6         94.0     15.7      0.0                          concurrent.futures.wait(vertex_feature_list)
   351                                           
   352         6      12632.0   2105.3      0.0                          print(self.id, "send all features")
   353                                           
   354                                                                   # self.sp.append(self.khop_neighborhood())
   355                                                                   # self.neighbor_features = [[] for i in range(K)]
   356                                                                   # self.record(epoch, self.get(self.epoch()))
   357                                           
   358                                                                   # send self marker
   359         6          4.0      0.7      0.0                          vertex_marker_list = []
   360        12     283289.0  23607.4      0.1                          with concurrent.futures.ThreadPoolExecutor() as executor:
   361        14          7.0      0.5      0.0                              for out in self.in_edges_list:
   362         8      56775.0   7096.9      0.0                                  future = executor.submit(notify, out, f"marker_{epoch}_{self.id}")
   363         8          5.0      0.6      0.0                                  vertex_marker_list.append(future)
   364         6         74.0     12.3      0.0                          concurrent.futures.wait(vertex_marker_list)
   365                                           
   366         6      18641.0   3106.8      0.0                          print(self.id, "send all markers")
   367                                           
   368         6         10.0      1.7      0.0                          self.Enabled = self.out_edges_list.copy()
   369                                                           # messages are before marker, marker can't be in Disabled
   370                                                           else:
   371                                                               continue
   372                                           
   373                                                       else:
   374   2475604     429629.0      0.2      0.1                  if c in self.Enabled:
   375        34         26.0      0.8      0.0                      index = message.count('v')
   376        34         10.0      0.3      0.0                      if index <= K:
   377        34         22.0      0.6      0.0                          self.neighbor_features[index - 1].append(message)
   378        34          7.0      0.2      0.0                      if index < K:
   379        12         10.0      0.8      0.0                          send_feature = f"v{self.id}" + message
   380        12         10.0      0.8      0.0                          neighbor_feature_list = []
   381        24     507658.0  21152.4      0.1                          with concurrent.futures.ThreadPoolExecutor() as executor:
   382        28         19.0      0.7      0.0                              for out in self.in_edges_list:
   383        16     367786.0  22986.6      0.1                                  future = executor.submit(notify, out, send_feature)
   384        16         11.0      0.7      0.0                                  neighbor_feature_list.append(future)
   385        12        171.0     14.2      0.0                          concurrent.futures.wait(neighbor_feature_list)
   386                                           
   387                                                           else:
   388   2475570   11454201.0      4.6      2.2                      continue
   389                                                       
   390        46         40.0      0.9      0.0              messageList.pop(0)
   391                                           
   392                                                           # if cqp not in self.Recorded:
   393                                                           #     pass
   394                                                           
   395                                                           # elif cqp in self.Recorded:
   396                                                           #     pass

Total time: 0.838576 s
File: worker_asy.py
Function: record at line 397

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   397                                               @profile
   398                                               def record(self, epoch, sp_snaposhot):
   399        16         24.0      1.5      0.0          message = f"record_{self.id}_{sp_snaposhot}_{epoch}"
   400        16     838552.0  52409.5    100.0          notify(str(int(self.id) % NUM_PARTITIONS), message, True)

Total time: 2.97526 s
File: worker_asy.py
Function: notify at line 402

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   402                                           @profile
   403                                           def notify(node, msg, worker=False):
   404        68     271369.0   3990.7      9.1      print('notify:', msg)
   405        68         19.0      0.3      0.0      while True:
   406        68     493278.0   7254.1     16.6          client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   407        68        282.0      4.1      0.0          client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
   408        68        426.0      6.3      0.0          client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 0))
   409        68        104.0      1.5      0.0          client_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
   410        68         12.0      0.2      0.0          try:
   411        68         19.0      0.3      0.0              if worker:
   412        16     356337.0  22271.1     12.0                  client_socket.connect((serverDict[int(node) % NUM_PARTITIONS], 10000 + int(node)))
   413                                                       else:
   414        52     844235.0  16235.3     28.4                  client_socket.connect((serverDict[int(node) % NUM_PARTITIONS], 12345 + int(node)))
   415                                                       
   416                                                       # print("connect: ", node)
   417        68     365074.0   5368.7     12.3              client_socket.send(msg.encode())
   418                                                       
   419                                                       # data = client_socket.recv(102400).decode()
   420                                                       # print('get reply:', data)
   421                                           
   422        68     309974.0   4558.4     10.4              client_socket.shutdown(socket.SHUT_WR)
   423        68     333952.0   4911.1     11.2              client_socket.close()
   424        68         18.0      0.3      0.0              break
   425                                                   except ConnectionRefusedError:
   426                                                       print('notify connection error')
   427                                                       client_socket.close()
   428                                                       # sleep(1)
   429                                                       continue
   430                                                   except OSError:
   431                                                       print('notify os error')
   432                                                       client_socket.close()
   433                                                       # sleep(1)
   434                                                       continue
   435                                                   # except Exception as e:
   436                                                   #     with open('ask', 'a') as f:
   437                                                   #         f.write(str(msg) + '\n' + str(e) + '\n' + str(traceback.format_exc()) + '\n\n\n\n\n')
   438                                                   finally:
   439        68        157.0      2.3      0.0              client_socket.close()

